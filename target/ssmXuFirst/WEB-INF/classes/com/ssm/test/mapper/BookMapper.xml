<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.test.mapper.BookMapper">
  <resultMap id="BaseResultMap" type="com.ssm.test.domain.Book">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="bookName" jdbcType="VARCHAR" property="bookname" />
    <result column="bookImage" jdbcType="VARCHAR" property="bookimage" />
    <result column="bookNum" jdbcType="INTEGER" property="booknum" />
    <result column="bookUrl" jdbcType="VARCHAR" property="bookurl" />
    <result column="author" jdbcType="VARCHAR" property="author" />
    <result column="intro" jdbcType="VARCHAR" property="intro" />
    <result column="createDate" jdbcType="DATE" property="createdate" />
    <result column="categoryId" jdbcType="INTEGER" property="categoryid" />
    <result column="userId" jdbcType="INTEGER" property="userId" />
    <result column="updateTime" jdbcType="TIMESTAMP" property="updatetime" />
    <result column="hits" jdbcType="INTEGER" property="hits" />
  </resultMap>
  <!--查询书籍关联评论,评论关联的用户-->
  <resultMap id="BookExam" type="com.ssm.test.domain.BookExam">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="bookName" jdbcType="VARCHAR" property="bookname" />
    <result column="bookImage" jdbcType="VARCHAR" property="bookimage" />
    <result column="bookNum" jdbcType="INTEGER" property="booknum" />
    <result column="bookUrl" jdbcType="VARCHAR" property="bookurl" />
    <result column="author" jdbcType="VARCHAR" property="author" />
    <result column="intro" jdbcType="VARCHAR" property="intro" />
    <result column="createDate" jdbcType="DATE" property="createdate" />
    <result column="categoryId" jdbcType="INTEGER" property="categoryid" />
    <result column="userId" jdbcType="INTEGER" property="userId" />
    <result column="updateTime" jdbcType="TIMESTAMP" property="updatetime" />
    <result column="hits" jdbcType="INTEGER" property="hits" />

    <!--书关联的评论
        collection关联的多条记录
        property:放在哪个属性中
        ofType:指定list集合的pojo属性
    -->
    <collection property="commentExamList" ofType="com.ssm.test.domain.CommentExam" >
      <!--评论的唯一标识-->
      <id column="cId" javaType="java.lang.Integer" property="id" ></id>
      <result column="cComment" javaType="java.lang.String" property="comment"></result>
      <result column="cTime" javaType="java.util.Date" property="commenttime"></result>
      <!--评论关联的用户-->
      <association property="user"  javaType="com.ssm.test.domain.User">
        <!--关联查询用户的唯一标识 javaType java类型-->
        <id column="uId" javaType="java.lang.Integer" property="id"></id>
        <result column="uName" javaType="java.lang.String" property="userName" />
      </association>
    </collection>
  </resultMap>
  <sql id="Base_Column_List">
    id, bookName, bookImage, bookNum, bookUrl, author, intro, createDate, categoryId,
    userId, updateTime, hits
  </sql>
  <!--查询图书总记录数-->
  <select id="selectCount" resultType="java.lang.Integer">
    SELECT COUNT(id) FROM book
  </select>
  <!--查询所有图书带分页-->
  <select id="selectByPage" parameterType="pageBean" resultType="book">
      SELECT
      <include refid="Base_Column_List"></include>
      FROM book
      LIMIT #{begin},#{end}
  </select>
  <!--按照点击量查询所有图书带分页-->
  <select id="selectByPageHits" parameterType="pageBean" resultType="book">
    SELECT
    <include refid="Base_Column_List"></include>
    FROM book
    ORDER BY hits
    LIMIT #{begin},#{end}
  </select>
  <!--按照更新时间查询所有图书带分页-->
  <select id="selectByPageUpdateTime" parameterType="pageBean" resultType="book">
    SELECT
    <include refid="Base_Column_List"></include>
    FROM book
    ORDER BY updateTime DESC
    LIMIT #{begin},#{end}
  </select>
  <!--按照创建时间查询所有图书带分页-->
  <select id="selectByPageCreateDate" parameterType="pageBean" resultType="book">
    SELECT
    <include refid="Base_Column_List"></include>
    FROM book
    ORDER by createDate DESC
    LIMIT #{begin},#{end}
  </select>
  <!--根据主键查询书关联评论和用户-->
  <select id="selectByPriKeyAndUserComm" parameterType="java.lang.Integer" resultMap="BookExam">
    SELECT book.*,cc.id cId, cc.comment cComment,cc.commentTime cTime,user.id uId,user.userName uName
    FROM COMMENT cc
    RIGHT JOIN (
	  SELECT
	   <include refid="Base_Column_List"></include>
	   FROM book WHERE id=#{id}
     ) book
   ON cc.bookId = book.`id`
   LEFT JOIN
   USER
   ON cc.`userId` = user.`id`
  </select>
  <!--根据书名或作者查询相关图书-->
  <select id="selectByAuthorOrName" parameterType="java.lang.String" resultType="book">
    SELECT
    <include refid="Base_Column_List"  />
    FROM book WHERE bookName LIKE '%${value}%' OR author LIKE '%${value}%'
  </select>
  <!--根据主键查询书-->
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from book
    where id = #{id,jdbcType=INTEGER}
  </select>
  <!--根据作者id查询书-->
  <select id="selectByUserId" parameterType="java.lang.Integer" resultType="book">
    select
    <include refid="Base_Column_List" />
    from book
    where userId = #{userId,jdbcType=INTEGER}
  </select>
  <!--查询前12本图书，按照点击数排序-->
  <select id="selectBookOrderByHit" resultType="book">
      SELECT
       <include refid="Base_Column_List"/>
      FROM book
      ORDER BY hits DESC limit 12
  </select>
  <!--更新书的章节+1-->
  <update id="updateBookNum" parameterType="java.lang.Integer">
    update book set bookNum=bookNum+1 where id=#{id}
  </update>
  <!--更新书的章节-->
  <update id="updateBookNumByNum" parameterType="book" >
    update book set bookNum=#{booknum} where id=#{id}
  </update>
  <!--添加书架-->
  <insert id="insertBookRack">
      INSERT INTO bookrack(userId,bookId) VALUES(#{userId}, #{bookId})
  </insert>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">

    delete from book
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.ssm.test.domain.Book">
    insert into book (id, bookName, bookImage,
      bookNum, bookUrl, author,
      intro, createDate, categoryId,
      userId, updateTime, hits
      )
    values (#{id,jdbcType=INTEGER}, #{bookname,jdbcType=VARCHAR}, #{bookimage,jdbcType=VARCHAR},
      #{booknum,jdbcType=INTEGER}, #{bookurl,jdbcType=VARCHAR}, #{author,jdbcType=VARCHAR},
      #{intro,jdbcType=VARCHAR}, #{createdate,jdbcType=DATE}, #{categoryid,jdbcType=INTEGER},
      #{userId,jdbcType=INTEGER}, #{updatetime,jdbcType=TIMESTAMP}, #{hits,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.ssm.test.domain.Book">
    insert into book
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="bookname != null">
        bookName,
      </if>
      <if test="bookimage != null">
        bookImage,
      </if>
      <if test="booknum != null">
        bookNum,
      </if>
      <if test="bookurl != null">
        bookUrl,
      </if>
      <if test="author != null">
        author,
      </if>
      <if test="intro != null">
        intro,
      </if>
      <if test="createdate != null">
        createDate,
      </if>
      <if test="categoryid != null">
        categoryId,
      </if>
      <if test="userId != null">
        userId,
      </if>
      <if test="updatetime != null">
        updateTime,
      </if>
      <if test="hits != null">
        hits,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="bookname != null">
        #{bookname,jdbcType=VARCHAR},
      </if>
      <if test="bookimage != null">
        #{bookimage,jdbcType=VARCHAR},
      </if>
      <if test="booknum != null">
        #{booknum,jdbcType=INTEGER},
      </if>
      <if test="bookurl != null">
        #{bookurl,jdbcType=VARCHAR},
      </if>
      <if test="author != null">
        #{author,jdbcType=VARCHAR},
      </if>
      <if test="intro != null">
        #{intro,jdbcType=VARCHAR},
      </if>
      <if test="createdate != null">
        #{createdate,jdbcType=DATE},
      </if>
      <if test="categoryid != null">
        #{categoryid,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="updatetime != null">
        #{updatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="hits != null">
        #{hits,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.ssm.test.domain.Book">
    update book
    <set>
      <if test="bookname != null">
        bookName = #{bookname,jdbcType=VARCHAR},
      </if>
      <if test="bookimage != null">
        bookImage = #{bookimage,jdbcType=VARCHAR},
      </if>
      <if test="booknum != null">
        bookNum = #{booknum,jdbcType=INTEGER},
      </if>
      <if test="bookurl != null">
        bookUrl = #{bookurl,jdbcType=VARCHAR},
      </if>
      <if test="author != null">
        author = #{author,jdbcType=VARCHAR},
      </if>
      <if test="intro != null">
        intro = #{intro,jdbcType=VARCHAR},
      </if>
      <if test="createdate != null">
        createDate = #{createdate,jdbcType=DATE},
      </if>
      <if test="categoryid != null">
        categoryId = #{categoryid,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        userId = #{userId,jdbcType=INTEGER},
      </if>
      <if test="updatetime != null">
        updateTime = #{updatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="hits != null">
        hits = #{hits,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ssm.test.domain.Book">
    update book
    set bookName = #{bookname,jdbcType=VARCHAR},
      bookImage = #{bookimage,jdbcType=VARCHAR},
      bookNum = #{booknum,jdbcType=INTEGER},
      bookUrl = #{bookurl,jdbcType=VARCHAR},
      author = #{author,jdbcType=VARCHAR},
      intro = #{intro,jdbcType=VARCHAR},
      createDate = #{createdate,jdbcType=DATE},
      categoryId = #{categoryid,jdbcType=INTEGER},
      userId = #{userId,jdbcType=INTEGER},
      updateTime = #{updatetime,jdbcType=TIMESTAMP},
      hits = #{hits,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>